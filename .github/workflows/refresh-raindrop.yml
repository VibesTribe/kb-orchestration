import "dotenv/config";
import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { setRepoSecret } from "./lib/github-secrets.js";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const ROOT_DIR = path.resolve(__dirname, "..");
const CACHE_ROOT = path.join(ROOT_DIR, "data", "cache");
const STATE_FILE = path.join(CACHE_ROOT, "raindrop-refresh.json");

const clientId = process.env.RAINDROP_CLIENT_ID;
const clientSecret = process.env.RAINDROP_CLIENT_SECRET;
const refreshToken = process.env.RAINDROP_REFRESH_TOKEN;
const targetSecret = process.env.RAINDROP_TARGET_SECRET ?? "RAINDROP_TOKEN";

function assert(value, message) {
  if (!value) throw new Error(message);
}

assert(clientId, "RAINDROP_CLIENT_ID env is required");
assert(clientSecret, "RAINDROP_CLIENT_SECRET env is required");
assert(refreshToken, "RAINDROP_REFRESH_TOKEN env is required");

const tokenEndpoint = "https://raindrop.io/oauth/access_token";

async function ensureDir(dir) {
  await fs.mkdir(dir, { recursive: true });
}

async function saveCheckpoint(payload) {
  await ensureDir(CACHE_ROOT);
  await fs.writeFile(STATE_FILE, JSON.stringify(payload, null, 2), "utf8");
}

async function refresh() {
  const response = await fetch(tokenEndpoint, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      client_id: clientId,
      client_secret: clientSecret,
      grant_type: "refresh_token",
      refresh_token: refreshToken
    })
  });

  if (!response.ok) {
    const text = await response.text();
    throw new Error(`Raindrop token refresh failed: ${response.status} ${text}`);
  }

  const json = await response.json();
  const accessToken = json.access_token;
  const expiresIn = json.expires_in; // seconds
  const expiresAt = json.expires
    ? new Date(json.expires * 1000).toISOString()
    : new Date(Date.now() + expiresIn * 1000).toISOString();

  if (!accessToken) throw new Error("Raindrop response missing access_token");

  await setRepoSecret(targetSecret, accessToken);

  const checkpoint = {
    refreshedAt: new Date().toISOString(),
    targetSecret,
    expiresIn,
    expiresAt
  };

  await saveCheckpoint(checkpoint);

  console.log("✅ Refreshed Raindrop token", checkpoint);
}

refresh().catch((error) => {
  console.error("❌ Raindrop refresh failed", error);
  process.exitCode = 1;
});

